// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Aspenlaub.Net.GitHub.CSharp.Pegh.Test.Components
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class JsonDepsDifferencerFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = new string[] {
                "JsonDepsDifferencer"};
        
#line 1 "JsonDepsDifferencer.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "JsonDepsDifferencer", "\tIn order to update compiler json dependencies output only if necessary\r\n\tI want " +
                    "to use a dedicated json dependencies differencer", ProgrammingLanguage.CSharp, new string[] {
                        "JsonDepsDifferencer"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "JsonDepsDifferencer")))
            {
                global::Aspenlaub.Net.GitHub.CSharp.Pegh.Test.Components.JsonDepsDifferencerFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Differences can be identified")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "JsonDepsDifferencer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("JsonDepsDifferencer")]
        public virtual void DifferencesCanBeIdentified()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Differences can be identified", null, ((string[])(null)));
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
    testRunner.When("I instantiate a json dependency differencer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Old Json",
                            "New Json",
                            "Namespace",
                            "Necessary"});
                table1.AddRow(new string[] {
                            "Aspenlaub.Net.GitHub.CSharp.ChabStandard/2.0.94.817\"",
                            "Aspenlaub.Net.GitHub.CSharp.ChabStandard/2.0.95.892\"",
                            "Aspenlaub.Net.GitHub.CSharp.ChabStandard",
                            ""});
                table1.AddRow(new string[] {
                            "Aspenlaub.Net.GitHub.CSharp.ChabStandard/2.0.94.817\"",
                            "Aspenlaub.Net.GitHub.CSharp.ChabStandard/2.0.95.892\"",
                            "Aspenlaub.Net.GitHub.CSharp.ChabStandar",
                            "X"});
                table1.AddRow(new string[] {
                            "Aspenlaub.Net.GitHub.CSharp.ChabStandard/2.0.94.817\"",
                            "Aspenlaub.Net.GitHub.CSharp.ChabStandar/2.0.95.892\"",
                            "Aspenlaub.Net.GitHub.CSharp.ChabStandard",
                            "X"});
                table1.AddRow(new string[] {
                            "Aspenlaub.Net.GitHub.CSharp.ChabStandar/2.0.94.817\"",
                            "Aspenlaub.Net.GitHub.CSharp.ChabStandard/2.0.95.892\"",
                            "Aspenlaub.Net.GitHub.CSharp.ChabStandard",
                            "X"});
                table1.AddRow(new string[] {
                            "Aspenlaub.Net.GitHub.CSharp.ChabStandard/2.0.94.817\" {",
                            "Aspenlaub.Net.GitHub.CSharp.ChabStandard/2.0.95.892\" [",
                            "Aspenlaub.Net.GitHub.CSharp.ChabStandard",
                            "X"});
#line 8
    testRunner.Then("it determines the following update necessities", ((string)(null)), table1, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
